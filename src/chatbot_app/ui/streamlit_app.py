"""
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —á–∞—Ç-–±–æ—Ç–æ–º –ø–æ –ø–æ–∏—Å–∫—É –±–∞–≥–æ–≤ –≤ –∏–≥—Ä–µ
"""

import streamlit as st
import logging
import requests
import os
from typing import Union, Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# URL API —Å–µ—Ä–≤–∏—Å–∞ (–±–µ—Ä–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –Ω–æ —É—á–∏—Ç—ã–≤–∞–µ–º —Ö–æ—Å—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤  docker compose)
API_URL = os.environ.get("CHATBOT_API_URL", "http://chatbot:8000")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ß–∞—Ç-–±–æ—Ç –ø–æ –±–∞–≥–∞–º –≤ –∏–≥—Ä–µ",
    layout="centered",
    initial_sidebar_state="auto",
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
def query_api(query_text: str) -> Union[Dict[str, Any], None]:
    try:
        response = requests.post(
            f"{API_URL}/query",
            json={"query": query_text},
            headers={"Content-Type": "application/json"},
            timeout=10
        )
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {str(e)}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API
def check_api_health() -> bool:
    try:
        response = requests.get(f"{API_URL}/health", timeout=5)
        if response.status_code == 200:
            health_data = response.json()
            return health_data.get("status") == "ok"
        return False
    except requests.exceptions.RequestException:
        return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API 
api_is_alive = check_api_health()

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("–ß–∞—Ç-–±–æ—Ç –ø–æ –±–∞–≥–∞–º –≤ –∏–≥—Ä–∞—Ö")

# –°–∞–π–¥–±–∞—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
with st.sidebar:
    st.header("–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
    st.markdown("""
    –≠—Ç–æ—Ç —á–∞—Ç-–±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Pinecone –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–≥–∞—Ö –≤ –∏–≥—Ä–µ.

    –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ –ø–æ–ª–µ –≤–Ω–∏–∑—É, –∏ –±–æ—Ç –Ω–∞–π–¥–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.
    """)
    
    if api_is_alive:
        st.success("API —Ä–∞–±–æ—Ç–∞–µ—Ç", icon="‚úÖ")
    else:
        st.error("API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", icon="‚ö†Ô∏è")

    # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"):
        st.session_state.chat_history = []
        st.rerun()

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
if api_is_alive:
    for message in st.session_state.chat_history:
        if message["role"] == "user":
            st.chat_message("user").write(message["content"])
        else:
            with st.chat_message("assistant"):
                st.write(message["content"])
                if "bug_title" in message and message["bug_title"]:
                    st.markdown(f"""
                    <div style="background-color: #FFF4E3; color: #FF5500; padding: 8px; border-radius: 5px; border-left: 3px solid #FF5500; margin-top: 5px;">
                    <strong>–ë–∞–≥:</strong> {message["bug_title"]}
                    </div>
                    """, unsafe_allow_html=True)

    if prompt := st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –æ –±–∞–≥–∞—Ö –≤ –∏–≥—Ä–µ..."):
        st.session_state.chat_history.append({"role": "user", "content": prompt})
        
        with st.spinner("–ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞..."):
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {prompt}")
            try:
                result = query_api(prompt)
                if result:
                    response = {
                        "role": "assistant",
                        "content": result.get("response", "–ù–µ –∑–Ω–∞—é"),
                        "bug_title": result.get("bug_title"),
                        "confidence": result.get("confidence", 0.0)
                    }
                    st.session_state.chat_history.append({
                        "role": response["role"],
                        "content": response["content"],
                        "bug_title": response["bug_title"]
                    })
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {response['confidence']:.2f}")
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{prompt}'")
                else:
                    st.session_state.chat_history.append({
                        "role": "assistant",
                        "content": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.",
                        "bug_title": None
                    })
            except Exception as e:
                logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
                st.session_state.chat_history.append({
                    "role": "assistant",
                    "content": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.",
                    "bug_title": None
                })

        st.rerun()
else:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API —á–∞—Ç-–±–æ—Ç–∞")
    st.warning("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–∏—Å API –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
